(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{288:function(t,r,a){"use strict";a.r(r);var v=a(10),_=Object(v.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"экосистема"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#экосистема"}},[t._v("#")]),t._v(" Экосистема")]),t._v(" "),r("h3",{attrs:{id:"о-структуре-defina"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#о-структуре-defina"}},[t._v("#")]),t._v(' О структуре "Defina"')]),t._v(" "),r("h4",{attrs:{id:"что-такое-rest-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#что-такое-rest-api"}},[t._v("#")]),t._v(" Что такое REST API?")]),t._v(" "),r("p",[t._v("API или интерфейс прикладного программирования — это набор правил, которые определяют, как приложения или устройства могут подключаться и взаимодействовать друг с другом. REST API — это API, который соответствует принципам проектирования REST или архитектурному стилю репрезентативной передачи состояния  . По этой причине REST API иногда называют RESTful API .")]),t._v(" "),r("p",[t._v("REST, впервые определенный в 2000 году ученым-компьютерщиком доктором Роем Филдингом в его докторской диссертации, обеспечивает относительно высокий уровень гибкости и свободы для разработчиков. Эта гибкость — лишь одна из причин, по которой REST API стали распространенным методом соединения компонентов и приложений в архитектуре "),r("RouterLink",{attrs:{to:"/pages/guide/doc.html"}},[t._v("микросервисов")]),t._v(".")],1),t._v(" "),r("hr"),t._v(" "),r("h4",{attrs:{id:"принципы-проектирования-rest"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#принципы-проектирования-rest"}},[t._v("#")]),t._v(" Принципы проектирования REST")]),t._v(" "),r("p",[t._v("На самом базовом уровне API — это механизм, который позволяет приложению или службе получать доступ к ресурсу в другом приложении или службе. Приложение или служба, выполняющие доступ, называются клиентом, а приложение или служба, содержащие ресурс, называются сервером.")]),t._v(" "),r("p",[t._v("Некоторые API, такие как SOAP или XML-RPC, налагают на разработчиков строгие рамки. Но REST API можно разрабатывать практически на любом языке программирования и поддерживать различные форматы данных. Единственное требование состоит в том, чтобы они соответствовали следующим шести принципам проектирования REST, также известным как архитектурные ограничения:")]),t._v(" "),r("ol",[r("li",[r("p",[r("strong",[t._v("Единый интерфейс")]),t._v(". Все запросы API для одного и того же ресурса должны выглядеть одинаково, независимо от того, откуда поступает запрос. REST API должен гарантировать, что одна и та же часть данных, например имя или адрес электронной почты пользователя, принадлежит только одному универсальному идентификатору ресурса (URI). Ресурсы не должны быть слишком большими, но должны содержать всю информацию, которая может понадобиться клиенту.")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("Развязка клиент-сервер")]),t._v(". В дизайне REST API клиентские и серверные приложения должны быть полностью независимы друг от друга. Единственная информация, которую должно знать клиентское приложение, — это URI запрошенного ресурса; никаким другим образом он не может взаимодействовать с серверным приложением. Точно так же серверное приложение не должно изменять клиентское приложение, кроме как передавать ему запрошенные данные через HTTP.")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("Безгражданство")]),t._v(". API-интерфейсы REST не имеют состояния, а это означает, что каждый запрос должен включать всю информацию, необходимую для его обработки. Другими словами, REST API не требуют сеансов на стороне сервера. Серверным приложениям не разрешено хранить какие-либо данные, связанные с запросом клиента.")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("Кэшируемость")]),t._v(". Когда это возможно, ресурсы должны кэшироваться на стороне клиента или сервера. Ответы сервера также должны содержать информацию о том, разрешено ли кэширование доставленного ресурса. Цель состоит в том, чтобы повысить производительность на стороне клиента и повысить масштабируемость на стороне сервера.")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("Многоуровневая архитектура системы")]),t._v(". В REST API вызовы и ответы проходят через разные уровни. Как правило, не думайте, что клиентское и серверное приложения подключаются друг к другу напрямую. В коммуникационном цикле может быть несколько различных посредников. REST API должны быть разработаны таким образом, чтобы ни клиент, ни сервер не могли сказать, взаимодействует ли он с конечным приложением или с посредником.")])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("Код по запросу (необязательно)")]),t._v(". REST API обычно отправляют статические ресурсы, но в некоторых случаях ответы могут также содержать исполняемый код (например, апплеты Java). В этих случаях код должен выполняться только по требованию.")])])]),t._v(" "),r("hr"),t._v(" "),r("h4",{attrs:{id:"как-работают-api-rest"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#как-работают-api-rest"}},[t._v("#")]),t._v(" Как работают API REST")]),t._v(" "),r("p",[t._v("API-интерфейсы REST взаимодействуют через HTTP-запросы для выполнения стандартных функций базы данных, таких как создание, чтение, обновление и удаление записей (также известных как CRUD) в ресурсе. Например, REST API будет использовать запрос GET для извлечения записи, запрос POST для ее создания, запрос PUT для обновления записи и запрос DELETE для ее удаления. Все методы HTTP могут использоваться в вызовах API. Хорошо спроектированный REST API похож на веб-сайт, работающий в веб-браузере со встроенными функциями HTTP.")]),t._v(" "),r("p",[t._v("Состояние ресурса в любой конкретный момент или отметку времени называется представлением ресурса. Эта информация может быть доставлена ​​клиенту практически в любом формате, включая нотацию объектов JavaScript (JSON), HTML, XLT, Python, PHP или обычный текст. JSON популярен, потому что его могут читать как люди, так и машины, и он не зависит от языка программирования.")]),t._v(" "),r("p",[t._v("Заголовки и параметры запросов также важны в вызовах REST API, поскольку они включают важную информацию идентификатора, такую ​​как метаданные, авторизация, унифицированные идентификаторы ресурсов (URI), кэширование, файлы cookie и многое другое. Заголовки запросов и ответов, наряду с обычными кодами состояния HTTP, используются в хорошо спроектированных REST API.")]),t._v(" "),r("hr"),t._v(" "),r("h4",{attrs:{id:"лучшие-практики-rest-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#лучшие-практики-rest-api"}},[t._v("#")]),t._v(" Лучшие практики REST API")]),t._v(" "),r("p",[t._v("Хотя гибкость является большим преимуществом дизайна REST API, та же самая гибкость позволяет легко разрабатывать API, который не работает или плохо работает. По этой причине профессиональные разработчики делятся передовым опытом в спецификациях REST API.")]),t._v(" "),r("p",[t._v("Спецификация OpenAPI (OAS) устанавливает интерфейс для описания API таким образом, который позволяет любому разработчику или приложению обнаружить его и полностью понять его параметры и возможности — доступные конечные точки, разрешенные операции на каждой конечной точке, параметры операций, методы аутентификации и т. д. информация. Последняя версия, OAS3, включает в себя практические инструменты, такие как генератор OpenAPI, для создания клиентов API и серверных заглушек на разных языках программирования.")]),t._v(" "),r("p",[t._v("Защита REST API также начинается с лучших отраслевых практик, таких как использование алгоритмов хеширования для защиты паролей и HTTPS для безопасной передачи данных. Платформа авторизации, такая как "),r("a",{attrs:{href:"https://www.rfc-editor.org/rfc/rfc6749",target:"_blank",rel:"noopener noreferrer"}},[t._v("OAuth 2.0"),r("OutboundLink")],1),t._v(", может помочь ограничить привилегии сторонних приложений. Используя метку времени в заголовке HTTP, API также может отклонить любой запрос, который поступает после определенного периода времени. Проверка параметров и веб-токены JSON — это другие способы гарантировать, что только авторизованные клиенты могут получить доступ к API.")]),t._v(" "),r("h4",{attrs:{id:"основа-продуктов-компании"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#основа-продуктов-компании"}},[t._v("#")]),t._v(" Основа продуктов компании")]),t._v(" "),r("p",[t._v("Со стороны может показаться что у компании очень много различных продуктов, но на самом деле есть единый API который визуально по разному оформлен и имеет разную оболочку. За счёт единой API можно сделать эффект синхронизации данных на разных приложениях и устройствах. Показывать пользователю только то что он указал и приобрёл через Defina Store, или пришёл к нам через другие источники.")]),t._v(" "),r("p",[t._v("Однако нужно учитывать,что у API есть пять разных сервисов, которые работают по отдельности и не нагружают основную систему. Микросервисная архитектура позволяет разделять зоны ответственности и обслуживать каждых сервис отдельно, не парализуя основной проект.")]),t._v(" "),r("p",[t._v("Такой подход позволяет нам делать программы, мобильные приложения и Saas не заставляя пользователя по новой создавать аккаунт чтобы авторизоваться для входа в систему. Так же это позволяет отслеживать и контролировать подписку, вовремя оповещая пользователя о истечении тарифного плана. Дополнительно это даёт полную аналитическую картину, без необходимости собирать это вместе.")])])}),[],!1,null,null,null);r.default=_.exports}}]);